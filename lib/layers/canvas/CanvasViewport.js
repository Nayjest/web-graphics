// Generated by CoffeeScript 1.6.2
/*
Abstract viewport class
Viewport is root layer in any scene
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/Viewport', 'components/underscore/underscore'], function(Viewport) {
    var CanvasViewport;

    return CanvasViewport = (function(_super) {
      __extends(CanvasViewport, _super);

      function CanvasViewport(config) {
        var coreOptions, defaults, finalConfig;

        defaults = {
          context: CanvasViewport.CONTEXT.CANVAS_2D
        };
        coreOptions = {
          $el: $('<canvas class="viewport" data-type="viewport" />')
        };
        finalConfig = _.defaults(coreOptions, config, defaults);
        CanvasViewport.__super__.constructor.call(this, finalConfig);
        this.setContext(finalConfig.context);
        this.$el.get(0).width = this.size.x;
        this.$el.get(0).height = this.size.y;
      }

      CanvasViewport.CONTEXT = {
        CANVAS_2D: '2d'
      };

      CanvasViewport.prototype.setContext = function(contextName) {
        return this.context = this.$el.get(0).getContext(contextName);
      };

      CanvasViewport.prototype.clear = function() {
        this.context.clearRect(0, 0, this.size.x, this.size.y);
        return CanvasViewport.__super__.clear.call(this);
      };

      CanvasViewport.prototype.redraw = function() {
        return this.clear().redrawChildren();
      };

      return CanvasViewport;

    })(Viewport);
  });

}).call(this);
