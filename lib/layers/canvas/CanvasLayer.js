// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/AbstractLayer', 'components/graphics/lib/layers/canvas/CanvasViewport', 'components/Vector2D/Vector2D', 'components/jquery/jquery', 'components/underscore/underscore'], function(AbstractLayer, CanvasViewport, Vector2D) {
    var CanvasLayer;

    return CanvasLayer = (function(_super) {
      __extends(CanvasLayer, _super);

      CanvasLayer.prototype.viewportClass = CanvasViewport;

      CanvasLayer.prototype.defaultDrawMethod = function() {
        throw new Error("Draw method isn't specified.");
      };

      function CanvasLayer(config) {
        if (config == null) {
          config = {};
        }
        CanvasLayer.__super__.constructor.call(this, config);
        this.drawMethod = config.drawMethod || this.defaultDrawMethod;
        this.context = config.context || this.viewport.context;
      }

      CanvasLayer.prototype.redraw = function() {
        var pos;

        if (this.visible) {
          pos = this.getAbsolutePos();
          this.drawMethod();
          return this.redrawChildren();
        }
      };

      CanvasLayer.prototype.getAbsolutePos = function() {
        return CanvasLayer.__super__.getAbsolutePos.call(this).add(this.viewport.size.clone().divideScalar(2));
      };

      CanvasLayer.prototype.on = function(eventName, handler) {
        return this._bindMouseEvent(eventName, handler);
      };

      CanvasLayer.prototype._bindMouseEvent = function(eventName, handler) {
        var _this = this;

        return this.viewport.$el.on(eventName, function(event) {
          var pos;

          pos = _this.getAbsolutePos();
          if ((Math.abs(pos.x - event.offsetX) < _this.size.x / 2) && (Math.abs(pos.y - event.offsetY) < _this.size.y / 2)) {
            return handler.call(_this, event);
          }
        });
      };

      return CanvasLayer;

    })(AbstractLayer);
  });

}).call(this);
