// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/AbstractActiveLayer', 'components/graphics/lib/layers/canvas/CanvasViewport', 'components/Vector2D/Vector2D', 'components/jquery/jquery', 'components/underscore/underscore'], function(AbstractActiveLayer, CanvasViewport, Vector2D) {
    var CanvasLayer;

    return CanvasLayer = (function(_super) {
      __extends(CanvasLayer, _super);

      CanvasLayer.prototype.viewportClass = CanvasViewport;

      CanvasLayer.prototype.defaultDrawMethod = function() {
        throw new Error("Draw method isn't specified.");
      };

      function CanvasLayer(config) {
        if (config == null) {
          config = {};
        }
        CanvasLayer.__super__.constructor.call(this, config);
        this.drawMethod = config.drawMethod || this.defaultDrawMethod;
        this.context = config.context || this.viewport.context;
      }

      CanvasLayer.prototype.redraw = function() {
        var pos;

        if (this.visible) {
          pos = this.getDrawPos();
          this.context.translate(pos.x, pos.y);
          this.context.rotate(this.angleRad);
          this.context.translate(-pos.x, -pos.y);
          this.drawMethod();
          this.redrawChildren();
          this.context.translate(pos.x, pos.y);
          this.context.rotate(-this.angleRad);
          return this.context.translate(-pos.x, -pos.y);
        }
      };

      CanvasLayer.prototype.getDrawPos = function() {
        return this.getAbsolutePos().add(this.viewport.size.clone().divideScalar(2));
      };

      CanvasLayer.prototype.getScreenPos = function() {
        return this.getCenterScreenPos().substract(this.size.clone().multiplyScalar(0.5));
      };

      CanvasLayer.prototype.getCenterScreenPos = function() {
        var domOffset;

        domOffset = this.viewport.$el.offset();
        this.getDrawPos().add({
          x: domOffset.left - window.pageXOffset,
          y: domOffset.top - window.pageYOffset
        });
        return this.getDrawPos();
      };

      return CanvasLayer;

    })(AbstractActiveLayer);
  });

}).call(this);
