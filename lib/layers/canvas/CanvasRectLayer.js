// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/canvas/CanvasLayer'], function(CanvasLayer) {
    var CanvasRectLayer;

    return CanvasRectLayer = (function(_super) {
      var _defaults;

      __extends(CanvasRectLayer, _super);

      _defaults = {
        color: 'gray',
        borderColor: 'red',
        borderWidth: 0
      };

      CanvasRectLayer.prototype.defaultDrawMethod = function() {
        var pos;

        pos = this.getDrawPos();
        this.context.beginPath();
        this.context.rect(pos.x - this.size.x / 2, pos.y - this.size.y / 2, this.size.x, this.size.y);
        this.context.fillStyle = this.color;
        this.context.fill();
        if (this.borderWidth) {
          this.context.lineWidth = this.borderWidth;
          this.context.strokeStyle = this.borderColor;
          return this.context.stroke();
        }
      };

      function CanvasRectLayer(config) {
        if (config == null) {
          config = {};
        }
        CanvasRectLayer.__super__.constructor.call(this, config);
        this.setColor(config.color || _defaults.color);
        this.setBorderColor(config.borderColor || _defaults.borderColor);
        this.setBorderWidth(config.borderWidth || _defaults.borderWidth);
      }

      CanvasRectLayer.prototype.setColor = function(color) {
        this.color = color;
        return this;
      };

      CanvasRectLayer.prototype.setBorderColor = function(borderColor) {
        this.borderColor = borderColor;
        return this;
      };

      CanvasRectLayer.prototype.setBorderWidth = function(borderWidth) {
        this.borderWidth = borderWidth;
        return this;
      };

      return CanvasRectLayer;

    })(CanvasLayer);
  });

}).call(this);
