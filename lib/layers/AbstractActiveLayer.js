// Generated by CoffeeScript 1.6.2
/*
Module DomLayer
@author Vitalii [Nayjest] Stepanenko <gmail@vitaliy.in>
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/AbstractLayer', 'components/graphics/lib/figures/dummyFigure', 'components/graphics/lib/figures/Rectangle', 'components/Vector2D/Vector2D', "components/jquery/jquery", "components/underscore/underscore"], function(AbstractLayer, dummyFigure, Rectangle, Vector2D) {
    var AbstractActiveLayer;

    return AbstractActiveLayer = (function(_super) {
      var _hoveredLayer, _mouseEventLayers;

      __extends(AbstractActiveLayer, _super);

      AbstractActiveLayer.prototype._defaultFigureClass = Rectangle;

      /*
      dummy prototype.figure will be used if layer isn't active
      */


      AbstractActiveLayer.prototype.figure = dummyFigure;

      function AbstractActiveLayer(config) {
        if (config == null) {
          config = {};
        }
        AbstractActiveLayer.__super__.constructor.call(this, config);
        if (config.active || config.figure) {
          _initActiveLayer(config.figure);
        } else {
          this.active = false;
        }
      }

      AbstractActiveLayer.prototype._initActiveLayer = function(figureClass) {
        var _class;

        if (figureClass == null) {
          figureClass = null;
        }
        this.active = true;
        _class = figureClass || this._defaultFigureClass;
        this.figure = new _class(this);
        return this._eventHandlers = {};
      };

      AbstractActiveLayer.prototype.on = function(eventName, handler) {
        var _base, _ref;

        this.active || this._initActiveLayer();
        if ((_ref = (_base = this._eventHandlers)[eventName]) == null) {
          _base[eventName] = $.Callbacks();
        }
        this._eventHandlers[eventName].add(handler);
        return this._bindMouseEvent(eventName, handler);
      };

      AbstractActiveLayer.prototype.fireEvent = function(eventName, options) {
        var $callbacks;

        $callbacks = this._eventHandlers[eventName];
        if ($callbacks) {
          return $callbacks.fireWith(this, options);
        }
      };

      _mouseEventLayers = {};

      _hoveredLayer = null;

      AbstractActiveLayer.prototype._bindMouseEvent = function(eventName) {
        var $el;

        if (!_mouseEventLayers[eventName]) {
          _mouseEventLayers[eventName] = [];
          $el = $('body');
          if (eventName === 'mouseover' || eventName === 'mouseout') {
            $el.on('mousemove', function(event) {
              var l, mousePos, _i, _len, _ref, _results;

              if (_hoveredLayer) {
                l = _hoveredLayer;
                mousePos = l.viewport.screenPosToViewport(event.pageX, event.pageY);
                if (!l.figure.isPointInside(mousePos)) {
                  _hoveredLayer.fireEvent('mouseout', [event]);
                  _hoveredLayer = null;
                }
              }
              _ref = _mouseEventLayers[eventName];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                l = _ref[_i];
                if (_hoveredLayer !== l) {
                  mousePos = l.viewport.screenPosToViewport(event.pageX, event.pageY);
                  if (l.figure.isPointInside(mousePos)) {
                    if (_hoveredLayer) {
                      _hoveredLayer.fireEvent('mouseout', [event]);
                    }
                    _hoveredLayer = l;
                    l.fireEvent('mouseover', [event]);
                    break;
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            });
          } else {
            $el.on(eventName, function(event) {
              var l, mousePos, _i, _len, _ref, _results;

              _ref = _mouseEventLayers[eventName];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                l = _ref[_i];
                mousePos = l.viewport.screenPosToViewport(event.pageX, event.pageY);
                if (l.figure.isPointInside(mousePos)) {
                  l.fireEvent(eventName, [event]);
                  break;
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            });
          }
        }
        _mouseEventLayers[eventName].push(this);
        return _mouseEventLayers[eventName].sort(function(a, b) {
          if (a.zIndex > b.zIndex) {
            return -1;
          }
          if (a.zIndex < b.zIndex) {
            return 1;
          }
          return 0;
        });
      };

      return AbstractActiveLayer;

    })(AbstractLayer);
  });

}).call(this);
