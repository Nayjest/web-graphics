// Generated by CoffeeScript 1.3.3

/*
module AbstractLayer
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/Node/Node', 'components/jquery/jquery'], function(Node) {
    var AbstractLayer, _defaults;
    _defaults = {
      x: 0,
      y: 0,
      w: 100,
      h: 100,
      zIndex: 1,
      angle: 0,
      zoom: 1
    };
    /*
      Base layer class
      @method #show()
      @method #hide()
      @method #getScreenPos()
      @method #getCenterScreenPos()
    */

    return AbstractLayer = (function(_super) {

      __extends(AbstractLayer, _super);

      /*
          @param {Object|null} config
          @option config {Array|null} offset [x,y] Offset in pixels
          @option config {Array|null} size [x,y] Size in pixels
          @option config {Number|null} zIndex css z-index of created canvas DOM Object
          @option config {Number|null} zoom
          @option config {Number|null} angle in degrees
          @option config {AbstractLayer|null} parent
          @option config {Array<AbstractLayer>|null} children
      */


      function AbstractLayer(config) {
        if (config == null) {
          config = {};
        }
        AbstractLayer.__super__.constructor.call(this, config.parent, config.children);
        this.setOffset(config.offset || [_defaults.x, _defaults.y]);
        this.setSize(config.size || [_defaults.w, _defaults.h]);
        this.setZIndex(config.zIndex || _defaults.zIndex);
        this.setZoom(config.zoom || _defaults.zoom);
        this.setAngle(config.angle || _defaults.angle);
        this.ready = $.Deferred();
        if (this.isReadyAfterConstruct) {
          this.ready.resolve(this);
        }
      }

      AbstractLayer.prototype.defaults = _defaults;

      AbstractLayer.prototype.isReadyAfterConstruct = true;

      /*
          @param {Number} zIndex
      */


      AbstractLayer.prototype.setZIndex = function(_zIndex) {
        this._zIndex = _zIndex;
        return this;
      };

      AbstractLayer.prototype.getZIndex = function() {
        return this._zIndex;
      };

      AbstractLayer.prototype.setOffset = function(offset) {
        this._offset = offset.slice(0);
        return this;
      };

      AbstractLayer.prototype.getOffset = function() {
        return this._offset;
      };

      AbstractLayer.prototype.setSize = function(size) {
        this._size = size.slice(0);
        return this;
      };

      AbstractLayer.prototype.getSize = function() {
        return this._size;
      };

      /*
          @param {Number} angle in degrees
      */


      AbstractLayer.prototype.setAngle = function(_angle) {
        this._angle = _angle;
        return this;
      };

      AbstractLayer.prototype.getAngle = function() {
        return this._angle;
      };

      AbstractLayer.prototype.setZoom = function(_zoom) {
        this._zoom = _zoom;
        return this;
      };

      AbstractLayer.prototype.getZoom = function() {
        return this._zoom;
      };

      /*
          @return {Array<Number>} [x,y]
      */


      AbstractLayer.prototype.getAbsoluteOffset = function() {
        var layer, x, y;
        layer = this;
        x = this.getOffset()[0];
        y = this.getOffset()[1];
        while (layer = layer.getParent()) {
          x += layer.getOffset()[0];
          y += layer.getOffset()[1];
        }
        return [x, y];
      };

      AbstractLayer.prototype.getAbsoluteZoom = function() {
        var layer, zoom;
        zoom = this._zoom;
        layer = this;
        while (layer = layer.getParent()) {
          zoom *= layer.getZoom();
        }
        return zoom;
      };

      /*
          Redraws layer
      */


      AbstractLayer.prototype.redraw = function() {
        return this.redrawChildren();
      };

      AbstractLayer.prototype.redrawChildren = function() {
        var child, children, _i, _len;
        children = this.getChildren();
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          child.redraw();
        }
        return this;
      };

      AbstractLayer.prototype.destroy = function() {};

      return AbstractLayer;

    })(Node);
  });

}).call(this);
