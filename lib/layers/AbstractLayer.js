// Generated by CoffeeScript 1.6.2
/*
module AbstractLayer
@author Vitalii [Nayjest] Stepanenko <gmail@vitaliy.in>
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/Node/Node', 'components/Vector2D/Vector2D', 'components/jquery/jquery'], function(Node, Vector2D) {
    "use strict";
    /*
    Base layer class
    @method #getScreenPos()
    @method #getCenterScreenPos()
    */

    var AbstractLayer;

    return AbstractLayer = (function(_super) {
      var TO_DEGREES, TO_RADIANS, defaults, get, set,
        _this = this;

      __extends(AbstractLayer, _super);

      get = function(props) {
        var getter, name, _results;

        _results = [];
        for (name in props) {
          getter = props[name];
          _results.push(AbstractLayer.prototype.__defineGetter__(name, getter));
        }
        return _results;
      };

      set = function(props) {
        var name, setter, _results;

        _results = [];
        for (name in props) {
          setter = props[name];
          _results.push(AbstractLayer.prototype.__defineSetter__(name, setter));
        }
        return _results;
      };

      TO_RADIANS = Math.PI / 180;

      TO_DEGREES = 180 / Math.PI;

      defaults = {
        pos: {
          x: 0,
          y: 0
        },
        size: {
          x: 100,
          y: 100
        },
        zIndex: 1,
        angle: 0,
        zoom: 1,
        visible: true
      };

      AbstractLayer.prototype.viewportClass = null;

      /*
      @param {Object|null} config
      @option config {Vector2D|object|null} pos position
      @option config {Vector2D|object|null} size size
      @option config {Number|null} zIndex
      @option config {Number|null} zoom
      @option config {Number|null} angle in degrees
      @option config {AbstractLayer|null} parent
      @option config {Array<AbstractLayer>|null} children
      */


      function AbstractLayer(config) {
        var parent;

        if (config == null) {
          config = {};
        }
        if (config.parent) {
          AbstractLayer.__super__.constructor.call(this, config.parent, config.children);
          if (this.viewportClass) {
            this.viewport = this.getRoot();
            if (!(this.viewport instanceof this.viewportClass)) {
              this.viewport = this.viewportClass.getDefault();
            }
          }
        } else {
          if (this.viewportClass) {
            this.viewport = parent = this.viewportClass.getDefault();
          } else {
            parent = null;
          }
          AbstractLayer.__super__.constructor.call(this, parent, config.children);
        }
        this.pos = Vector2D.cloneFrom(config.pos || defaults.pos);
        this.size = Vector2D.cloneFrom(config.size || defaults.size);
        this.zIndex = config.zIndex || defaults.zIndex;
        this.zoom = config.zoom || defaults.zoom;
        this.visible = config.visible || defaults.visible;
        if (config.angle) {
          this.angle = config.angle;
        } else {
          if (config.angleRad) {
            this.angleRad = config.angleRad;
          } else {
            this.angle = defaults.angle;
          }
        }
        this.ready = $.Deferred();
        if (this.isReadyAfterConstruct) {
          this.ready.resolve(this);
        }
      }

      AbstractLayer.prototype.isReadyAfterConstruct = true;

      get({
        angle: function() {
          return this._angle;
        }
      });

      set({
        angle: function(val) {
          this._angle = val;
          return this._angleRad = val * TO_RADIANS;
        }
      });

      get({
        angleRad: function() {
          return this._angleRad;
        }
      });

      set({
        angleRad: function(val) {
          this._angle = val;
          return this._angleRad = val * TO_DEGREES;
        }
      });

      AbstractLayer.prototype.show = function() {
        this.visible = true;
        return this;
      };

      AbstractLayer.prototype.hide = function() {
        this.visible = false;
        return this;
      };

      AbstractLayer.prototype.getAbsolutePos = function() {
        var layer, pos, _i, _len, _ref;

        pos = this.pos.clone();
        _ref = this.getParents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layer = _ref[_i];
          pos.add(layer.pos);
        }
        return pos;
      };

      AbstractLayer.prototype.getAbsoluteZoom = function() {
        var layer, zoom, _i, _len, _ref;

        zoom = this.zoom;
        _ref = this.getParents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layer = _ref[_i];
          zoom *= layer.zoom;
        }
        return zoom;
      };

      /*
      Redraws layer
      */


      AbstractLayer.prototype.redraw = function() {
        if (this.visible) {
          return this.redrawChildren();
        }
      };

      AbstractLayer.prototype.redrawChildren = function() {
        var child, children, _i, _len;

        children = this.getChildren();
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          child.redraw();
        }
        return this;
      };

      AbstractLayer.prototype.destructor = function() {};

      return AbstractLayer;

    }).call(this, Node);
  });

}).call(this);
