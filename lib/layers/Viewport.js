// Generated by CoffeeScript 1.6.2
/*
Abstract viewport class
Viewport is root layer in any scene
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/dom/AbstractDomLayer', 'components/Vector2D/Vector2D'], function(AbstractDomLayer, Vector2D) {
    var Viewport;

    return Viewport = (function(_super) {
      __extends(Viewport, _super);

      Viewport["default"] = null;

      Viewport.getDefault = function() {
        var _ref;

        return (_ref = this["default"]) != null ? _ref : this["default"] = new this;
      };

      function Viewport(config) {
        var $body, defaults, _base, _ref;

        if (config == null) {
          config = {};
        }
        if ((_ref = (_base = this.constructor)["default"]) == null) {
          _base["default"] = this;
        }
        $body = $('body');
        defaults = {
          size: {
            x: $body.width(),
            y: $body.height()
          },
          $el: $('<div class="viewport" data-type="viewport" />'),
          $parentEl: $body
        };
        Viewport.__super__.constructor.call(this, _.defaults(config, defaults));
        this.$el.css({
          overflow: 'hidden'
        });
      }

      Viewport.prototype.clear = function() {
        return this;
      };

      Viewport.prototype.screenPosToViewport = function(x, y) {
        var domOffset, res;

        domOffset = this.$el.offset();
        return res = new Vector2D(x - this.size.x / 2 - domOffset.left, y - this.size.y / 2 - domOffset.top);
      };

      return Viewport;

    })(AbstractDomLayer);
  });

}).call(this);
