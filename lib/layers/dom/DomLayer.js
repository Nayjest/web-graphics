// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['components/graphics/lib/layers/AbstractLayer', "components/jquery/jquery", "components/underscore/underscore"], function(AbstractLayer) {
    var DomLayer, _defaults, _radInDeg;
    _radInDeg = Math.PI / 180;
    _defaults = {
      getCss: function() {
        return {
          outline: '1px dotted gray',
          position: 'absolute',
          top: 0,
          left: 0
        };
      },
      tag: 'div',
      get$el: function() {
        return $("<" + this.tag + "/>");
      },
      getAttr: function() {
        return {};
      }
    };
    DomLayer = (function(_super) {

      __extends(DomLayer, _super);

      /*
          @option config {Object|null} css DOM Element css
          @option config {Object|null} attr DOM Element attributes
          @option config {Object|null} $el DOM Element wrapped to jQuery object
          @option config {DomElement|jQuery|selector|null} domContainer
      */


      function DomLayer(config) {
        this._createDomElement(config);
        DomLayer.__super__.constructor.call(this, config);
      }

      DomLayer.prototype._createDomElement = function(config) {
        if (config == null) {
          config = {};
        }
        this.$el = config.$el || _defaults.get$el();
        if (config.$parentEl) {
          this._setParentEl(config.$parentEl);
        }
        this.$el.css(_.defaults({}, config.css, _defaults.getCss()));
        this.$el.attr(_.defaults({}, config.attr, _defaults.getAttr()));
        return this.$el.get(0).layer = this;
      };

      /*
          Shows layer
      */


      DomLayer.prototype.show = function() {
        this.$el.show();
        return this;
      };

      DomLayer.prototype.hide = function() {
        this.$el.hide();
        return this;
      };

      DomLayer.prototype._getNonDomLayersOffset = function() {
        var parent, parents, x, y, _i, _len;
        parents = this.getParents();
        x = 0;
        y = 0;
        for (_i = 0, _len = parents.length; _i < _len; _i++) {
          parent = parents[_i];
          if (parent instanceof DomLayer) {
            break;
          }
          x += parent.getOffset()[0];
          y += parent.getOffset()[1];
        }
        return [x, y];
      };

      DomLayer.prototype._calcDomOffset = function() {
        var a, d, h, innerTopRightPos, nonDomOffset, parentOffset, w, zoom;
        parentOffset = this.$parentEl.offset();
        zoom = this.getAbsoluteZoom();
        w = this.getSize()[0] * zoom;
        h = this.getSize()[1] * zoom;
        innerTopRightPos = [(this.$parentEl.width() - w) / 2, (this.$parentEl.height() - h) / 2];
        a = this.getAngle();
        if (a) {
          d = Math.sqrt(w * w + h * h);
          a = (90 - a % 90) * _radInDeg;
          innerTopRightPos[1] += (h - d * Math.sin(a + Math.acos(w / d))) / 2;
          innerTopRightPos[0] += (w - d * Math.cos(Math.asin(h / d) - a)) / 2;
        }
        nonDomOffset = this._getNonDomLayersOffset();
        return {
          left: parentOffset.left + innerTopRightPos[0] + this.getOffset()[0] * zoom + nonDomOffset[0],
          top: parentOffset.top + innerTopRightPos[1] + this.getOffset()[1] * zoom + nonDomOffset[1]
        };
      };

      DomLayer.prototype.redraw = function() {
        var val;
        val = "rotate(" + this.getAngle() + "deg)";
        this.$el.offset(this._calcDomOffset()).width(this.getSize()[0] * this.getZoom()).height(this.getSize()[1] * this.getZoom()).css({
          "-moz-transform": val,
          "-webkit-transform": val,
          "-o-transform": val,
          transform: val
        });
        return DomLayer.__super__.redraw.call(this);
      };

      DomLayer.prototype.setParentEl = function($parentEl) {
        this.$parentEl = $($parentEl);
        return this.$el.appendTo(this.$parentEl);
      };

      DomLayer.prototype.setParent = function(parent) {
        DomLayer.__super__.setParent.call(this, parent);
        if (parent instanceof DomLayer) {
          this.setParentEl(parent.$el);
        } else {
          if (!this.$parentEl) {
            this.setParentEl($('body'));
          }
        }
        return this;
      };

      DomLayer.prototype.destroy = function() {
        this.$el.detach();
        return DomLayer.__super__.destroy.call(this);
      };

      DomLayer.prototype.getScreenPos = function() {
        var offset;
        offset = this.$el.offset();
        return [offset.left - window.pageXOffset, offset.top - window.pageYOffset];
      };

      DomLayer.prototype.getCenterScreenPos = function() {
        var pos;
        pos = this.getScreenPos();
        return [pos[0] + ~~(this.size[0] / 2), pos[1] + ~~(this.size[1] / 2)];
      };

      return DomLayer;

    })(AbstractLayer);
    return DomLayer;
  });

}).call(this);
